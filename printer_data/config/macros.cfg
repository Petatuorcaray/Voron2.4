#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30
    
[gcode_macro GANTRY_PARK]
gcode:
    M400
    {% if printer.toolhead.position.z < 25 %}
      G0 Z25 F6000
      M400
    {% endif %}
    DEPLOY_GANTRY_STANDS
    G4 P4000
    QUERY_GANTRY_STANDS
    G90
    G0 Z10 F6000
    M400
    M84

[gcode_macro GANTRY_UNPARK]
gcode:
    M400
    SET_GCODE_OFFSET Z=0 MOVE=1
    SET_KINEMATIC_POSITION X=0 Y=0 Z=10
    G90
    G0 Z25 F6000
    M400
    RETRACT_GANTRY_STANDS
    G4 P4000
    QUERY_GANTRY_STANDS

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    BED_MESH_CLEAR
    G90
    STATUS_HOMING
    _PROBE_UNLOCK
    G28 PROBE_LOCK
    QUAD_GANTRY_LEVEL
    G28 Z
    DOCK_PROBE_UNLOCK
    RESTORE_GCODE_STATE NAME=STATE_G32
    STATUS_READY

[gcode_macro APPLY_TEMP_OFFSET]
gcode:
    {% set BED_TEMP = params.BED|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|float %}
    {% set BED_Factor = 0.0004 %}
    {% set EXTRUDER_Factor = 0.00007 %}
    {% set TOTAL_OFFSET = (BED_TEMP * BED_Factor) + (EXTRUDER_TEMP * EXTRUDER_Factor) %}

    {action_respond_info("Temperature correction Offset Applied!")}
    SET_GCODE_OFFSET Z=0
    SET_GCODE_OFFSET Z_ADJUST={TOTAL_OFFSET} MOVE=1
    
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}

    BED_MESH_CLEAR
    GANTRY_UNPARK
    G90
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} ; wait for bed temp
    {% if BED_TEMP > 0 %}
        G4 P60000 ; wait 1 minute
    {% endif %}
    STATUS_HOMING
    _PROBE_UNLOCK
    G28 PROBE_LOCK
    QUAD_GANTRY_LEVEL
    G28 Z
    BED_MESH_CALIBRATE
    DOCK_PROBE_UNLOCK
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP} ; wait for extruder temp
    LINE_PURGE
    APPLY_TEMP_OFFSET BED={BED_TEMP} EXTRUDER={EXTRUDER_TEMP}
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    G0 X{th.axis_maximum.x - 10} Y{th.axis_maximum.y - 10} F3600  ; park nozzle at right corner
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

    SET_GCODE_OFFSET Z=0 MOVE=1

    GANTRY_PARK

  # In order to use this you need to increase max_extrude_cross_section in your extruder config or klipper will complain. I set mine to 30

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}


############### BEDFANS ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.6		# Fan speed once bed temp is reached  
variable_slow: 0.2		# Fan speed while bed is heating
gcode:

########## Bed Fans #########

[fan_generic BedFans]
pin: PA13
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}

################ Filament #####################

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=unload_state
    SET_FILAMENT_SENSOR SENSOR=filament_presence_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=filament_motion_sensor ENABLE=0
	G91
    {% if printer.extruder.target < params.TEMP|default(235)|float %}
    	# Heat up hotend to provided temp or 235 as default as that should work OK with most filaments.
    	M104 S{params.TEMP|default(235,true)}
    {% endif %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(235,true)}
	{% set unload_speed = 3000 %}
	{% set unload_length = 150 %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-{unload_length} F{unload_speed}
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    SET_FILAMENT_SENSOR SENSOR=filament_presence_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=filament_motion_sensor ENABLE=1
    G90
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=load_state
    SET_FILAMENT_SENSOR SENSOR=filament_presence_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=filament_motion_sensor ENABLE=0
	G91
    {% if printer.extruder.target < params.TEMP|default(235)|float %}
    	# Heat up hotend to provided temp or 235 as default as that should work OK with most filaments.
    	M104 S{params.TEMP|default(235,true)}
    {% endif %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(235,true)}
	{% set load_speed = 1500 %}
	{% set load_length = 70 %}
	M117 Loading filament...
	# Load the filament into the hotend area.
	G0 E{load_length} F{load_speed}
	# Wait a secod
	G4 P1000
	# Purge
	G0 E40 F100
	# Wait for purge to complete
	M400
	M117 Filament loaded!
	RESPOND MSG="Filament loaded!"
    SET_FILAMENT_SENSOR SENSOR=filament_presence_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=filament_motion_sensor ENABLE=1
    G90
	RESTORE_GCODE_STATE NAME=load_state
    